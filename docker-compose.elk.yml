version: "3.8"

services:
  elasticsearch:
    image: "docker.io/bitnami/elasticsearch:8"
    container_name: elasticsearch
    environment:
      #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elk      

  kibana:
    image: "docker.io/bitnami/kibana:8"
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS:http://elasticsearch:9200
    networks:
      - elk      
    depends_on:
      - elasticsearch

  filebeat:
    build:
      context: ./filebeat
    container_name: filebeat
    volumes:
      - ./logs:/src/logs
    networks:
      - elk      
    depends_on:
      - elasticsearch
      - kibana
  
  logstash:
    build:
      context: logstash/
    ports:
      - 31000:31000
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
#      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  fastapi-app:
    build:
      context: ./fastapi
      dockerfile: prod.dockerfile
    container_name: fastapi-app
    ports:
      - "8080:8000"
    volumes:
      - ./logs:/data_catalog/logs
    networks:
      - elk      

  postgresdb:
    build:
      context: ./postgresdb
    healthcheck:
      test: test -f /tmp/finished.ok
      interval: 5s
      timeout: 10s
      retries: 120
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_NAME_API=productapi

    ports:
      - '54321:5432'
    volumes:
      - postgres-data:/var/lib/postgresql
    networks:
      - elk      
  productapi:
    build:
      context: ./ProductApi/ProductApi
      dockerfile: ./Dockerfile.qa
    environment:
      - ASPNETCORE_ENVIRONMENT=QA
    restart: always
    ports:
      - '5248:5248'
    volumes:
      - ./logs:/logs      
    networks:
      - elk      
    depends_on:
      postgresdb:
        condition: service_healthy
        
  productapi:
    build:
      context: ./ProductApi
      dockerfile: ./ProductApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=QA
    restart: always
    ports:
      - '5248:80'
      - '5249:443'      
    volumes:
      - ./logs:/logs  
    networks:
      - elk      
    depends_on:
       postgresdb:
          condition: service_healthy
  api07:
    build:
      context: ./api07
      dockerfile: ./api07/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=QA
    restart: always
    ports:
      - '5401:80'
      - '5402:443'
    volumes:
      - ./logs:/logs 
    networks:
      - elk
    depends_on:
       postgresdb:
          condition: service_healthy
networks:
  elk:
    driver: bridge
          
volumes:
  elasticsearch_data:
    driver: local
  postgres-data:
    driver: local